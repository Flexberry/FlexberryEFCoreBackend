// <auto-generated />
using System;
using Cats.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Cats.Db.Migrations
{
    [DbContext(typeof(CatsContext))]
    [Migration("20191003081932_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Cats.Model.Breed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("Rare")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Breed");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba015ad2-44fe-45eb-9bf5-313603e9f775"),
                            Name = "Aphrodite Giant",
                            Rare = false
                        });
                });

            modelBuilder.Entity("Cats.Model.Cat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("BreedId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double?>("WeightKg")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.ToTable("Cats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d5689ed-b864-4da6-94f3-f036ab83d0d6"),
                            Birthday = new DateTime(2015, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("ba015ad2-44fe-45eb-9bf5-313603e9f775"),
                            Name = "Муська"
                        },
                        new
                        {
                            Id = new Guid("a64ea9d9-3fe2-4556-9483-914138b79703"),
                            Birthday = new DateTime(2017, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Васька"
                        });
                });

            modelBuilder.Entity("Cats.Model.Paw", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CatId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Size")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CatId");

                    b.ToTable("Paw");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9644fa54-b4e6-41f6-9765-d9ab888e2b0e"),
                            CatId = new Guid("5d5689ed-b864-4da6-94f3-f036ab83d0d6"),
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("bed52cca-ee24-49e6-9f20-84f069c151e8"),
                            CatId = new Guid("5d5689ed-b864-4da6-94f3-f036ab83d0d6"),
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("160a6376-16ed-4597-b769-f1203c588fcf"),
                            CatId = new Guid("5d5689ed-b864-4da6-94f3-f036ab83d0d6"),
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("2c0361fc-b8b7-4599-8937-a081390aec60"),
                            CatId = new Guid("5d5689ed-b864-4da6-94f3-f036ab83d0d6"),
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("758d5931-531b-4ed2-ac9d-7c1142cf3792"),
                            CatId = new Guid("a64ea9d9-3fe2-4556-9483-914138b79703"),
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("c9afd7ed-b6ff-4c79-aa38-654c55370ca3"),
                            CatId = new Guid("a64ea9d9-3fe2-4556-9483-914138b79703"),
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("6bc3a507-b8a4-40a2-ac60-adcaf8da9916"),
                            CatId = new Guid("a64ea9d9-3fe2-4556-9483-914138b79703"),
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("bf97d85f-f273-42f9-b1d4-6e99bfe23cca"),
                            CatId = new Guid("a64ea9d9-3fe2-4556-9483-914138b79703"),
                            Type = 3
                        });
                });

            modelBuilder.Entity("Cats.Model.Cat", b =>
                {
                    b.HasOne("Cats.Model.Breed", "Breed")
                        .WithMany()
                        .HasForeignKey("BreedId");
                });

            modelBuilder.Entity("Cats.Model.Paw", b =>
                {
                    b.HasOne("Cats.Model.Cat", "Cat")
                        .WithMany("Paws")
                        .HasForeignKey("CatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
